---
description: Guidelines for maintaining clear and consistent documentation throughout the LMM project.
globs: lmm_project/**/*.py, README.md
alwaysApply: true
---
# LMM Documentation Guidelines

Clear documentation is essential for a complex cognitive architecture project. These guidelines ensure consistent and helpful documentation throughout the codebase.

## Documentation Types

1. **Code Documentation**
   - Docstrings for all functions, classes, and methods
   - Type annotations for all parameters and return values
   - Comments for complex algorithms or non-obvious logic
   - Module-level documentation explaining purpose and interactions

2. **Architecture Documentation**
   - High-level system design documentation
   - Module interaction diagrams
   - Data flow explanations
   - Developmental progression descriptions

3. **Developmental Documentation**
   - Clear explanation of developmental stages
   - Documentation of expected capabilities at each stage
   - Milestone definitions and verification methods
   - Learning progression descriptions

4. **User Documentation**
   - Setup and installation instructions
   - Usage examples
   - Configuration options
   - Troubleshooting guidance

## Documentation Standards

- Use clear, concise language
- Explain the "why" not just the "what"
- Use consistent terminology throughout
- Include examples for complex concepts
- Document limitations and edge cases
- Update documentation when code changes

## Docstring Format

Use the following format for function docstrings:

```python
def function_name(param1: type, param2: type) -> return_type:
    """
    Brief description of function purpose.
    
    More detailed explanation if needed.
    
    Parameters:
    param1: Description of first parameter
    param2: Description of second parameter
    
    Returns:
    Description of return value
    
    Raises:
    ExceptionType: Description of when this exception is raised
    """
```

## Class Documentation

Include the following for class documentation:

1. Class purpose and responsibility
2. Explanation of how it fits into the larger architecture
3. Description of key attributes
4. Documentation for all methods
5. Usage examples where appropriate

## Developmental Documentation

For developmental aspects, include:

1. Current implementation stage
2. Developmental trajectory
3. Expected capabilities at different stages
4. Known limitations at current stage
5. Planned future developments