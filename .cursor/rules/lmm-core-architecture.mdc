---
description: Guidelines for implementing the central architecture of the LMM system, focusing on modular design and cognitive development principles.
globs: lmm_project/core/*.py, lmm_project/main.py
alwaysApply: true
---
# LMM Core Architecture Guidelines

The Large Mind Model (LMM) project aims to create a genuine cognitive system learning from absolute zero, with specialized modules that interact through an event-based communication system.

## Key Architecture Principles

- **Modular Design**: Each cognitive function is implemented as a separate module
- **Event-Based Communication**: Modules communicate through a centralized event bus
- **Developmental Stages**: The system progresses through distinct developmental stages (prenatal, infant, child, adolescent, adult)
- **Emergent Intelligence**: Complex capabilities should emerge from simpler foundations
- **Pure Learning Approach**: No pre-programmed capabilities beyond basic neural building blocks

## Implementation Requirements

- Implement the Mind class as the central coordination point that manages all cognitive modules
- Use EventBus for inter-module communication rather than direct function calls
- Maintain a StateManager to track the system's current state and development level
- Use Pydantic for all data models to ensure strict type validation
- Implement clear developmental progression metrics for each module
- Track module development separately from overall mind development
- Avoid "shortcuts" that would give the system pre-existing capabilities

## File Organization

- `mind.py` - Central Mind class that coordinates all modules
- `event_bus.py` - Communication system for inter-module messaging
- `message.py` - Typed message structures for module communication
- `state_manager.py` - Global state tracking and persistence
- `types.py` - Common type definitions
- `exceptions.py` - Custom exception classes

## Architecture Flow

1. Main application initializes the Mind
2. Mind creates and initializes all cognitive modules
3. Events flow between modules through the EventBus
4. Each module processes inputs and publishes results as events
5. The Mind updates its state based on module outputs
6. Development progresses based on experiences and learning