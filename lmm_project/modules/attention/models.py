from enum import Enum
from typing import Dict, List, Optional, Union, Any
from datetime import datetime
from uuid import UUID, uuid4
from pydantic import BaseModel, Field, field_validator

class AttentionMode(str, Enum):
    """Attention focusing modes available to the attention system"""
    PASSIVE = "passive"         # Default mode with minimal focus
    ALERT = "alert"             # Heightened awareness, scanning for stimuli
    FOCUSED = "focused"         # Directed focus on specific input
    SUSTAINED = "sustained"     # Extended attention on an area of interest
    DIVIDED = "divided"         # Attention split between multiple targets
    SELECTIVE = "selective"     # Filtering out distractions to focus on specific inputs
    ALTERNATING = "alternating" # Shifting between different attention targets

class FocusLevel(float, Enum):
    """Standard attention focus intensity levels"""
    NONE = 0.0
    VERY_LOW = 0.2
    LOW = 0.4
    MEDIUM = 0.6
    HIGH = 0.8
    VERY_HIGH = 1.0

class AttentionTarget(BaseModel):
    """A target of attention focus"""
    id: UUID = Field(default_factory=uuid4)
    timestamp: datetime = Field(default_factory=datetime.now)
    target_type: str
    target_id: UUID
    description: str
    priority: float = Field(default=FocusLevel.MEDIUM, ge=0.0, le=1.0)
    relevance_score: float = Field(default=0.5, ge=0.0, le=1.0)
    duration_ms: Optional[int] = None  # How long it's been in focus, None for current focus
    
    model_config = {"extra": "forbid"}

class SalienceFeature(BaseModel):
    """A feature that contributes to the salience of an input"""
    name: str
    value: float
    weight: float = Field(default=1.0, ge=0.0)
    
    model_config = {"extra": "forbid"}

class AttentionFocus(BaseModel):
    """The current focus of attention"""
    id: UUID = Field(default_factory=uuid4)
    timestamp: datetime = Field(default_factory=datetime.now)
    mode: AttentionMode = AttentionMode.PASSIVE
    primary_target: Optional[AttentionTarget] = None
    secondary_targets: List[AttentionTarget] = Field(default_factory=list)
    focus_intensity: float = Field(default=FocusLevel.MEDIUM, ge=0.0, le=1.0)
    duration_ms: int = Field(default=0)  # How long this focus has been maintained
    context_data: Dict[str, Any] = Field(default_factory=dict)
    
    model_config = {"extra": "forbid"}

class SalienceAssessment(BaseModel):
    """Assessment of the salience of an input"""
    id: UUID = Field(default_factory=uuid4)
    timestamp: datetime = Field(default_factory=datetime.now)
    input_id: UUID
    input_type: str
    salience_score: float = Field(ge=0.0, le=1.0)
    contributing_features: List[SalienceFeature] = Field(default_factory=list)
    context_influence: float = Field(default=0.0, ge=-1.0, le=1.0)  # How context affects salience
    
    model_config = {"extra": "forbid"}

class AttentionEvent(BaseModel):
    """Event generated by the attention system"""
    id: UUID = Field(default_factory=uuid4)
    timestamp: datetime = Field(default_factory=datetime.now)
    event_type: str
    source_module: str = "attention"
    payload: Dict[str, Any] = Field(default_factory=dict)
    
    model_config = {"extra": "forbid"}

class AttentionState(BaseModel):
    """Current state of the attention module"""
    current_mode: AttentionMode = AttentionMode.PASSIVE
    current_focus: Optional[AttentionFocus] = None
    focus_history: List[AttentionFocus] = Field(default_factory=list, max_items=10)
    active_targets: Dict[UUID, AttentionTarget] = Field(default_factory=dict)
    salience_threshold: float = Field(default=0.5, ge=0.0, le=1.0)
    distractibility: float = Field(default=0.5, ge=0.0, le=1.0)  # Higher means more easily distracted
    attention_span_ms: int = Field(default=10000)  # Attention span in milliseconds
    developmental_age: float = Field(default=0.0, ge=0.0)
    
    model_config = {"extra": "forbid"}

class AttentionConfig(BaseModel):
    """Configuration for the attention module"""
    default_mode: AttentionMode = AttentionMode.PASSIVE
    base_salience_threshold: float = Field(default=0.5, ge=0.0, le=1.0)
    novelty_weight: float = Field(default=0.7, ge=0.0, le=1.0)
    emotional_salience_weight: float = Field(default=0.6, ge=0.0, le=1.0)
    base_attention_span_ms: int = Field(default=10000)  # Base attention span in milliseconds
    focus_history_length: int = Field(default=10, ge=1)
    max_secondary_targets: int = Field(default=3, ge=0)
    enable_divided_attention: bool = Field(default=True)
    context_influence_strength: float = Field(default=0.5, ge=0.0, le=1.0)
    
    model_config = {"extra": "forbid"}
